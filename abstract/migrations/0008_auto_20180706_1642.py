# Generated by Django 2.0 on 2018-07-06 06:42

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('abstract', '0007_auto_20180706_1324'),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateField(default=datetime.date.today, verbose_name='Creation date')),
                ('modification_date', models.DateField(default=datetime.date.today, verbose_name='Modification date')),
                ('text', models.TextField(default=None, verbose_name='Review')),
                ('score_content', models.IntegerField(default=None, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], verbose_name="Score based on the abstract's scientific content.")),
                ('score_contribution', models.IntegerField(default=None, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], verbose_name="Score based on the author's contribution to the work.")),
                ('score_interest', models.IntegerField(default=None, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], verbose_name="Score based on the ability of the abstract's contents to hold your interest.")),
                ('abstract', models.ForeignKey(blank=None, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', related_query_name='review', to='abstract.Abstract')),
                ('reviewer', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', related_query_name='review', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('reviewer',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='comment',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='comment',
            name='abstract',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='reviewer',
        ),
        migrations.DeleteModel(
            name='Comment',
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('reviewer', 'abstract')},
        ),
    ]
